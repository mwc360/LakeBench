[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "lakebench"
version = "0.9.0"
authors = [
    { name="Miles Cole" },
]
license = {file = "LICENSE"}
description = "A multi-modal Python library for benchmarking Azure lakehouse engines and ELT scenarios, supporting both industry-standard and novel benchmarks."
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Intended Audience :: Developers",
    "Topic :: System :: Benchmark",
]
dependencies = [
    "numpy>=1.24.4",
    "sqlglot==26.30.0"
]

[project.optional-dependencies]
duckdb = ["duckdb==1.3.1", "deltalake==1.0.2", "pyarrow>=15.0.0"]
polars = ["polars==1.31.0", "deltalake==1.0.2", "pyarrow>=15.0.0"]
daft = ["daft==0.5.7", "deltalake==0.25.5", "pyarrow>=15.0.0"]
tpcds_datagen = ["duckdb==1.3.1", "pyarrow>=15.0.0"]
tpch_datagen = ["duckdb==1.3.1", "pyarrow>=15.0.0"]
sparkmeasure = ["sparkmeasure==0.24.0"]
sail = ["pysail==0.3.3", "pyspark[connect]==4.0.0", "deltalake>=1.0.2", "pyarrow>=15.0.0"]
dev = ["ruff>=0.12.9"]

[project.urls]
github = "https://github.com/mwc360/LakeBench"
Issues = "https://github.com/mwc360/LakeBench/issues"

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.package-data]
# Include SQL files src directory
"lakebench" = ["**/*.sql"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 120
indent-width = 4
extend-include = ["*.ipynb"]
extend-exclude = ["build", "dist", ".venv", ".github", ".vscode"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = ["ALL"]
ignore = [  # https://docs.astral.sh/ruff/rules/
    "COM812", # Trailing comma missing
    "D100",   # Missing docstring in public module
    "D200",   # One-line docstring should fit on one line
    "D203",   # 1 blank line required before class docstring
    "D212",   #	Multi-line docstring summary should start at the first line
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "Q003",   # Change outer quotes to avoid escaping inner quotes
    "SLF001", # Private member accessed: {access}
    "TRY003", # Avoid specifying long messages outside the exception class
]
unfixable = [
    "C405",   # Unnecessary list literal (rewrite as a set literal)
    "D400",   # First line should end with a period
    "D415",   # First line should end with a period, question mark, or exclamation point
    "PT027",  # Use `pytest.raises` instead of unittest-style `assertRaises`
    "RET504", # Unnecessary assignment to `query` before `return` statement
    "SIM118", # Use `key in dict` instead of `key in dict.keys()` - VERY DANGEROUS!
    "T201",   # `print` found
]